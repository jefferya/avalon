# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will download a prebuilt Ruby version, install dependencies and run tests with Rake
# For more information see: https://github.com/marketplace/actions/setup-ruby-jruby-and-truffleruby

name: CI 

on: [push, pull_request]

jobs:
  test:
    name: Run test suite
    runs-on: ubuntu-latest

    env:
      COMPOSE_FILE: docker-compose.lightweight.yml

    steps:
    - uses: actions/checkout@v2

    - name: Initiate the Avalon service containers 
      run: docker-compose up -d

    - name: Set up Ruby
    # To automatically get bug fixes and new Ruby versions for ruby/setup-ruby,
    # change this to (see https://github.com/ruby/setup-ruby#versioning):
    # uses: ruby/setup-ruby@v1
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.6

    # Cache manually
    - name: Cache Ruby Gems
      uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: bundle-use-ruby-${{ matrix.os }}-${{ matrix.ruby }}-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          bundle-use-ruby-${{ matrix.os }}-${{ matrix.ruby }}-

        # bundle config with aws development test mysql
        # bundle config without debug production staging uat
    - name: Install dependencies - Ruby
      run: |
        bundle config with mysql
        bundle install --with mysql --jobs 4 --retry 3

    - name: Cache Yarn packages 
      id: yarn-cache
      run: echo "::set-output name=dir::$(yarn cache dir)"

      uses: actions/cache@v2
      with:
        path: ${{ steps.yarn-cache.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies - Yarn 
      run: yarn install 

    - name: Run tests
      env:
        RAILS_ENV: test
      run: |
        bundle exec rake db:create 
        bundle exec rake db:migrate
        bundle exec rake
